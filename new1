import random
import time
import tkinter as tk
from tkinter import messagebox, simpledialog
import sys

sys.setrecursionlimit(2000)  # Increase recursion limit to handle larger lists

def recommend_games_iterative(games, budget, min_rating):
    """
    Iterative approach to recommend games based on budget and minimum rating.

    Args:
        games (list of dict): List of games with 'name', 'price', and 'rating'.
        budget (float): Maximum amount the user is willing to spend.
        min_rating (float): Minimum acceptable rating.

    Returns:
        list of dict: Games that match the criteria.
    """
    recommendations = []
    for game in games:
        if game['price'] <= budget and game['rating'] >= min_rating:
            recommendations.append(game)
    return recommendations

def recommend_games_recursive(games, budget, min_rating, index=0, recommendations=None):
    """
    Recursive approach to recommend games based on budget and minimum rating.

    Args:
        games (list of dict): List of games with 'name', 'price', and 'rating'.
        budget (float): Maximum amount the user is willing to spend.
        min_rating (float): Minimum acceptable rating.
        index (int): Current index in the games list.
        recommendations (list of dict): Accumulated recommendations.

    Returns:
        list of dict: Games that match the criteria.
    """
    if recommendations is None:
        recommendations = []
    if index == len(games):
        return recommendations
    if games[index]['price'] <= budget and games[index]['rating'] >= min_rating:
        recommendations.append(games[index])
    return recommend_games_recursive(games, budget, min_rating, index + 1, recommendations)

def sort_games_iterative(games, key):
    """
    Iterative approach to sort games by a specified key.

    Args:
        games (list of dict): List of games with 'name', 'price', and 'rating'.
        key (str): The key to sort the games by ('price' or 'rating').

    Returns:
        list of dict: Sorted list of games.
    """
    for i in range(len(games)):
        for j in range(len(games) - i - 1):
            if games[j][key] > games[j + 1][key]:
                games[j], games[j + 1] = games[j + 1], games[j]
    return games

def sort_games_recursive(games, key, n=None):
    """
    Recursive approach to sort games by a specified key.

    Args:
        games (list of dict): List of games with 'name', 'price', and 'rating'.
        key (str): The key to sort the games by ('price' or 'rating').
        n (int): Current length of the unsorted portion of the list.

    Returns:
        list of dict: Sorted list of games.
    """
    if n is None:
        n = len(games)
    if n <= 1:
        return games
    for i in range(n - 1):
        if games[i][key] > games[i + 1][key]:
            games[i], games[i + 1] = games[i + 1], games[i]
    return sort_games_recursive(games, key, n - 1)

def get_user_input(root, prompt, type_=float):
    while True:
        try:
            response = simpledialog.askstring("Input", prompt, parent=root)
            if response is None:
                return None
            return type_(response)
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid value.")

def main():
    # List of 1000 real game names
    game_names = [
        "The Witcher 3: Wild Hunt", "Cyberpunk 2077", "Red Dead Redemption 2", "Minecraft", 
        "Grand Theft Auto V", "The Last of Us Part II", "Elden Ring", "Assassin's Creed Valhalla", 
        "Overwatch 2", "Call of Duty: Modern Warfare II", "The Legend of Zelda: Breath of the Wild", 
        "God of War Ragnarök", "Hades", "Hollow Knight", "Super Mario Odyssey", "Fortnite",
        "Fall Guys: Ultimate Knockout", "Apex Legends", "The Elder Scrolls V: Skyrim", "Bloodborne", 
        "Persona 5", "Doom Eternal", "Horizon Zero Dawn", "Final Fantasy XV", "Minecraft Dungeons", 
        "Far Cry 5", "Metal Gear Solid V: The Phantom Pain", "BioShock Infinite", "Uncharted 4: A Thief’s End", 
        "Dark Souls III", "Battlefield V", "Stardew Valley", "Rocket League", "No Man's Sky", 
        "Tom Clancy’s The Division 2", "Sea of Thieves", "Watch Dogs: Legion", "The Sims 4", "Ghost of Tsushima", 
        "Spelunky 2", "Resident Evil Village", "Control", "The Outer Worlds", "Assassin's Creed Odyssey", 
        "Dragon Age: Inquisition", "Monster Hunter: World", "Super Smash Bros. Ultimate", "Red Dead Online", 
        "Borderlands 3", "Call of Duty: Warzone", "FIFA 22", "NBA 2K22", "Madden NFL 22", "Star Wars: Battlefront II",
        "Gears 5", "The Last of Us Remastered", "Dead by Daylight", "Diablo III", "Destiny 2", "Counter-Strike: Global Offensive",
        "Valorant", "League of Legends", "The Witcher 2: Assassins of Kings", "Civilization VI",
        "Hitman 3", "Dark Souls Remastered", "Crash Bandicoot 4: It's About Time", "Tetris Effect", "The Binding of Isaac: Rebirth", 
        "Metro Exodus", "Street Fighter V", "Overcooked! 2", "Fallout 4", "Kingdom Come: Deliverance", 
        "Assassin's Creed Black Flag", "Far Cry New Dawn", "Shovel Knight", "Superhot", "Persona 4 Golden", 
        "Final Fantasy VII Remake", "Bioshock", "Forza Horizon 4", "GTA Online", "Warframe", "Monster Hunter Rise",
        "RimWorld", "The Stanley Parable", "Celeste", "Dying Light", "Outer Worlds", 
        "Kingdom Hearts III", "State of Decay 2", "Hellblade: Senua's Sacrifice", "Dragon Quest XI", "F1 2021", 
        "Total War: Warhammer II", "Batman: Arkham Knight", "Rocket League", "Minecraft Java Edition", "Cuphead", 
        "Nier: Automata", "Kingdom Hearts II", "Spiderman: Miles Morales", "Need for Speed Heat", 
        "For Honor", "Noita", "Terraria", "Farming Simulator 19", "F1 2020", "The Forest", "Dark Souls", "Outlast", 
        "Watch Dogs 2", "Baldur's Gate 3", "Left 4 Dead 2", "Ghost Recon Wildlands", "Wasteland 3", 
        "Fallout: New Vegas", "SimCity 4", "XCOM 2", "Witcher 2: Assassins of Kings", "Dead Space", 
        "Mordhau", "Valhall", "The Crew 2", "NBA 2K21", "FIFA 21", "Madden NFL 21", "Farming Simulator 17", 
        "Dragon Ball Z: Kakarot", "Crash Team Racing Nitro-Fueled", "Assassin’s Creed III", "Mass Effect Legendary Edition", 
        "Dark Souls II", "Mafia III", "Tales of Arise", "Hitman 2", "Destiny", "Shenmue III", "Vampire: The Masquerade – Bloodlines 2", 
        "Watch Dogs", "Red Dead Redemption", "Spiderman", "Ratchet & Clank: Rift Apart", "Outriders", "F1 2022", 
        "Watch Dogs", "Diablo II: Resurrected", "Control: Ultimate Edition", "Hitman 3", "Bloodstained: Ritual of the Night", 
        "Jedi: Fallen Order", "Tekken 7", "Persona 3", "Fallout 76", "Axiom Verge", "Middle-earth: Shadow of Mordor", 
        "Worms Rumble", "Borderlands: The Handsome Collection", "Saints Row IV", "Kingdom Hearts: Chain of Memories", 
        "Star Wars: Squadrons", "Call of Duty: Cold War", "Ghost Recon Breakpoint", "Outlast 2", "XCOM: Enemy Unknown", 
        "Cuphead", "Knights and Bikes", "Fable II", "The Evil Within 2", "Tales of Vesperia", 
        "Starcraft II", "Rainbow Six Siege", "Star Wars: Knights of the Old Republic", "Hunt: Showdown", 
        "Brawlhalla", "Fallout 3", "Worms Battlegrounds", "Slay the Spire", "The Division", "FIFA 19", "Injustice 2", 
        "Forza Motorsport 7", "Worms WMD", "Shadow of the Tomb Raider", "Dead Rising 4", "Mortal Kombat 11", 
        "Battlefield 1", "Middle-earth: Shadow of War", "Rayman Legends", "Super Mario Party", "Super Mario Maker 2", 
        "Skyrim Special Edition", "Nex Machina", "Shenmue II", "Super Bomberman R", "Spelunky", "Lords of the Fallen", 
        "Tales of Symphonia", "Axiom Verge 2", "Path of Exile", "No Man’s Sky", "The Surge 2", "Kerbal Space Program", 
        "Human: Fall Flat", "Wreckfest", "Aliens: Fireteam Elite", "Monster Hunter Stories 2: Wings of Ruin", "Darksiders III", 
        "The Escapists 2", "Grim Fandango Remastered", "Slime Rancher", "Lords Mobile", "Dragon Age II", "Journey", 
        "Spintires: MudRunner", "World War Z", "Grand Theft Auto IV", "L.A. Noire", "Subnautica: Below Zero", 
        "The Vanishing of Ethan Carter", "Assetto Corsa", "Borderlands 2", "Age of Empires II: Definitive Edition", 
        "Planet Coaster", "Tropico 6", "Persona 5 Royal", "Red Faction Guerrilla", "Total War: Three Kingdoms", 
        "Skul: The Hero Slayer", "Slay the Spire", "Golf With Your Friends", "Pummel Party", "Paladins", 
        "Risk of Rain 2", "F1 2019", "Brawlhalla", "Euro Truck Simulator 2", "Overcooked", "Star Wars: Battlefront", 
        "Rising Storm 2: Vietnam", "Diablo IV", "A Way Out", "Among Us", "Dead Space 3", "The Sims 3",
        "Battlefield 4", "World of Warcraft", "Zelda: Wind Waker", "Unravel 2", "Sea of Thieves", "My Time at Portia", 
        "The Hunter: Call of the Wild", "Factorio", "Resident Evil 4", "Plants vs Zombies: Battle for Neighborville", 
        "Assassin's Creed Syndicate", "Fallout Shelter", "Planetary Annihilation", "Dota 2", "Tarkov", "Dishonored 2", 
        "Call of Duty: Vanguard", "Mordheim: City of the Damned", "Age of Empires IV", "Tales of Zestiria", 
        "Tales of Berseria", "Wargroove", "Tomb Raider: Definitive Edition", "Football Manager 2021", "Dune: Spice Wars",
        "Need for Speed: Payback", "Shin Megami Tensei V", "The Swords of Ditto", "Broforce", "Dying Light 2", "Minecraft Earth",
        "Final Fantasy XIV", "Tom Clancy’s Ghost Recon", "Bloodstained", "Super Bomberman", "Cooking Simulator", "TrackMania",
        "The Crew", "Left 4 Dead", "Spyro the Dragon", "Resident Evil 2 Remake", "The Crew", "Fable", "Gears of War", 
        "Dragon’s Dogma", "Forza Horizon 5", "Knack", "The Order 1886", "Total War: Shogun 2", "Blasphemous", "Fable III", 
        "Plants vs Zombies 2", "Dead Cells", "Farming Simulator 2020", "TrackMania Nations", "The Forest", "Watch Dogs 3", 
        "BlazBlue", "Little Nightmares", "Kingdom Come Deliverance", "Star Wars Battlefront", "How Fish Is Made", "The Tarnishing of Juxtia", 
        "One Finger Death Punch 2", "Woodboy", "Hexcells", "Elephantasy", "Claybook", "I Fell From Grace", "Balatro", "The Supraland Series", 
        "Zachlike", "Cityscaper", "The Last Cube", "Evoland", "Puzzle Pelago", "Dicey Dungeons", "A Monsters Expedition", "Rogue State Revolution", 
        "For The King", "Dungeon of the Endless", "Reventure", "To the Moon", "Finding Paradise", "Wandersong", "Celeste", "A Short Hike", "Katana ZERO", 
        "Hotline Miami", "Moonlighter", "Little Misfortune", "Night in the Woods", "Oxenfree", "Firewatch", "The Longing", "Slime Rancher", 
        "Hollow Knight", "Gris", "Blasphemous", "Salt and Sanctuary", "Dead Cells", "Risk of Rain 2", "Overland", "Below", "Into the Breach", 
        "Tangledeep", "Noita", "World of Horror", "Loop Hero", "Darkwood", "Omori", "Disco Elysium", "Sunless Sea", "Cultist Simulator", 
        "Lobotomy Corporation", "Library of Ruina", "Ring of Pain", "Slay the Spire", "Monster Train", "Wildermyth", "Crying Suns", "Children of Morta", 
        "Frostpunk", "They Are Billions", "Northgard", "RimWorld", "Oxygen Not Included", "Factorio", "Satisfactory", "Banished", "The Banner Saga", 
        "Pyre", "Bastion", "Transistor", "Hades", "The Stanley Parable", "Papers, Please", "Return of the Obra Dinn", "Outer Wilds", "Her Story", 
        "The Witness", "Telling Lies", "What Remains of Edith Finch", "Tacoma", "Observation", "Soma", "Amnesia: Rebirth", "Layers of Fear", "Visage", 
        "Phasmophobia", "DEVOUR", "Granny", "Emily Wants to Play", "Hello Neighbor", "Little Nightmares", "Inside", "Limbo", "Planet Zoo", "Parkitect", 
        "The Red Strings Club", "Observer", "Stories Untold", "Asemblance", "Distance", "Antichamber", "The Turing Test", "Q.U.B.E.", "Tacopocalypse", 
        "Pony Island", "Epistory - Typing Chronicles", "Never Alone", "Eastshade", "Mutazione", "The Stillness of the Wind", 
        "Yonder: The Cloud Catcher Chronicles", "Haven", "Carto", "Unpacking", "A Fold Apart", "Grimm’s Hollow", "Rakuen", "Finding Teddy", 
        "Fez", "Hyper Light Drifter", "CrossCode", "Iconoclasts", "Salt", "Insatia", "Don’t Starve", "Cattails", "Potion Craft", 
        "Alba: A Wildlife Adventure", "My Time at Sandrock", "Garden Paws", "Graveyard Keeper", "Slime Farmer", 
        "Forager", "Spiritfarer", "Child of Light", "GreedFall", "The Technomancer", "Fae Tactics", "Star Renegades", "Black Book", 
        "Sable", "ScourgeBringer", "Deep Sky Derelicts", "Void Bastards", "UnderMine", "Moon Hunters", "Risk of Rain", "Nuclear Throne", 
        "Furi", "Hyper Gun", "Project Warlock", "Ion Fury", "Turbo Overkill", "UltraKill", "Teardown", "Pathologic 2", "The Endless Forest", 
        "Darkest Dungeon", "Griftlands", "Void Tyrant", "Neoverse", "Deck of Ashes", "Tainted Grail: Conquest", "Trials of Fire", 
        "Against the Moon", "Roguebook", "Banners of Ruin", "DungeonTop", "Chronicon", "Halls of Torment", "Legend of Keepers", 
        "Ziggurat 2", "Gunfire Reborn", "Synthetic 2", "Space Haven", "Starbound", "Astrox Imperium", "Endless Sky", 
        "Star Control: Origins", "Cosmoteer", "RimWorld: Biotech", "Kerbal Space Program", "Universe Sandbox", "SimpleRockets 2", 
        "Osiris: New Dawn", "Stationeers", "Hardspace: Shipbreaker", "Ship Simulator Extremes", "The Long Dark", "FAR: Lone Sails", 
        "Below Zero", "Subnautica","Jurassic World Evolution", "Farming Simulator 22", "Manor Lords", "Mafia I", "Mafia II","Lords of The Fallen"

    ]

    # Generate 1000 games with random prices and ratings from the above game names
    games = []
    for name in game_names:
        games.append({
            "name": name,
            "price": round(random.uniform(1, 60), 2),
            "rating": round(random.uniform(1, 5), 1)
        })

    root = tk.Tk()
    root.withdraw()  # Hide the main window

    # Get user input
    budget = get_user_input(root, "Enter your budget (in USD): ")
    if budget is None:
        return
    min_rating = get_user_input(root, "Enter the minimum acceptable rating (1-5): ")
    if min_rating is None:
        return
    search_method = simpledialog.askstring("Input", "Choose search method (iterative/recursive):", parent=root)
    if search_method is None:
        return
    sort_method = simpledialog.askstring("Input", "Choose sorting method (iterative/recursive):", parent=root)
    if sort_method is None:
        return

    # Perform search
    start_time = time.time()
    if search_method.lower() == "iterative":
        recommendations = recommend_games_iterative(games, budget, min_rating)
    else:
        recommendations = recommend_games_recursive(games, budget, min_rating)
    search_duration = time.time() - start_time

    # Sort recommendations
    start_time = time.time()
    if sort_method.lower() == "iterative":
        sorted_recommendations = sort_games_iterative(recommendations, "price")
    else:
        sorted_recommendations = sort_games_recursive(recommendations, "price")
    sort_duration = time.time() - start_time

    # Display recommendations
    if sorted_recommendations:
        game_list = "\n".join([f"{game['name']} - ${game['price']} - Rating: {game['rating']}" for game in sorted_recommendations])
        messagebox.showinfo("Recommended Games", f"Recommended Games:\n\n{game_list}")
    else:
        messagebox.showinfo("No Recommendations", "No games found that meet the criteria.")

    # Show performance statistics
    messagebox.showinfo("Performance", f"Search Method Duration: {search_duration:.10f} seconds\nSorting Method Duration: {sort_duration:.10f} seconds")

if __name__ == "__main__":
    main()
