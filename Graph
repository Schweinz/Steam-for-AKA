import random
import time
import tkinter as tk
from tkinter import simpledialog, messagebox
import sys
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator

sys.setrecursionlimit(2000)  # Increase recursion limit to handle larger lists

def recommend_games_iterative(games, budget, min_rating):
    recommendations = []
    for game in games:
        if game['price'] <= budget and game['rating'] >= min_rating:
            recommendations.append(game)
    return recommendations

def recommend_games_recursive(games, budget, min_rating, index=0, recommendations=None):
    if recommendations is None:
        recommendations = []
    if index == len(games):
        return recommendations
    if games[index]['price'] <= budget and games[index]['rating'] >= min_rating:
        recommendations.append(games[index])
    return recommend_games_recursive(games, budget, min_rating, index + 1, recommendations)

def generate_games(num_games):
    game_names = [
        "The Witcher 3: Wild Hunt", "Cyberpunk 2077", "Red Dead Redemption 2", "Minecraft", 
        "Grand Theft Auto V", "The Last of Us Part II", "Elden Ring", "Assassin's Creed Valhalla", 
        "Overwatch 2", "Call of Duty: Modern Warfare II", "The Legend of Zelda: Breath of the Wild", 
        "God of War Ragnar√∂k", "Hades", "Hollow Knight", "Super Mario Odyssey", "Fortnite"
    ]
    games = []
    for i in range(num_games):
        name = random.choice(game_names)
        games.append({
            "name": name,
            "price": round(random.uniform(1, 60), 2),
            "rating": round(random.uniform(1, 5), 1)
        })
    return games

def get_user_input(root, prompt, type_=float):
    while True:
        try:
            response = simpledialog.askstring("Input", prompt, parent=root)
            if response is None:
                return None
            return type_(response)
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid value.")

def main():
    root = tk.Tk()
    root.withdraw()  # Hide the main window

    # Get user input
    budget = get_user_input(root, "Enter your budget (in USD): ")
    if budget is None:
        return
    min_rating = get_user_input(root, "Enter the minimum acceptable rating (1-5): ")
    if min_rating is None:
        return

    # Record times for varying data sizes
    sizes = range(0, 1001, 100)  # Include 0 as the starting size
    iterative_times = [0]  # Starting point for iterative times
    recursive_times = [0]  # Starting point for recursive times

    for size in sizes[1:]:  # Start from 100 to avoid repeating 0 index
        games = generate_games(size)

        # Measure iterative recommendation time
        start_time = time.time()
        recommend_games_iterative(games, budget, min_rating)
        iterative_times.append(time.time() - start_time)

        # Measure recursive recommendation time
        start_time = time.time()
        recommend_games_recursive(games, budget, min_rating)
        recursive_times.append(time.time() - start_time)

    # Plotting the comparison graph
    plt.figure(figsize=(10, 6))
    plt.plot(sizes, iterative_times, label='Iterative', color='blue', marker='o')
    plt.plot(sizes, recursive_times, label='Recursive', color='red', marker='x')
    plt.xlabel('Number of Games')
    plt.ylabel('Time (seconds)')
    plt.title('Comparison of Iterative vs Recursive Process Speed')

    # Setting x-axis to snap at every 100 games
    plt.gca().xaxis.set_major_locator(MultipleLocator(100))  # X-axis snaps every 100 games

    # Adding grid and legend
    plt.legend()
    plt.grid(True)

    # Show the plot
    plt.show()

if __name__ == "__main__":
    main()
